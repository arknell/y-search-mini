{"version":3,"sources":["api/indexing/indexing.controller.js"],"names":["indexingOne","indexingWithInformation","indexingMath","remove","modify","getTotal","copy","indexing","update","destroy","indexingCheck","_","require","logger","seeker","mongodb","dbcopy","indexer","req","res","obj","body","keys","name","_id","i","length","newObj","send","e","console","log","message","json","result","contents","content","classInfos","classInfo","indexingOneWithContent","dbname","open","then","db","count","err","catch","dbo","core","coredb","save","orderKey","index","columns","find","o","type","recentDate","recentUpdate","pk","parent","run","split","total","originalCount","parentkey","undefined","config","ipp","order","apiurl","status","isEach","done","findOne","doc","key","docdb","tf"],"mappings":"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","file":"indexing.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/indexings              ->  index\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = require('lodash');\r\n//var mssql = require('../../components/commons/mssql');\r\nvar logger = require('../../components/loggers/logger');\r\n// 2017.04.26 seeker 추가\r\nvar seeker = require('../../components/seekers/indexingSeeker');\r\nvar mongodb = require('../../components/commons/mongo');\r\nvar dbcopy = require('../../components/indexers/dbcopy');\r\nvar indexer = require('../../components/indexers/indexer');\r\n\r\n/**\r\n * 문항 : 한 문항 색인 (증분색인) --> 팀스워드에서 호출\r\n * 그외 : 한 문서 색인 (증분색인) --> 문서 생성시에 호출해야 함 ex) 시험지 만들기에서 시험지 만든 후 {name: 'paperdoc', keys: [testcode1, testcode2]}\r\n * @param req\r\n * @param res\r\n */\r\nexport function indexingOne(req, res) {\r\n\t// 2017.04.27 indexing one 요청 시 queue에 저장\r\n\tlet obj = req.body;\r\n\ttry {\r\n\t\tvar keys = obj.keys;\r\n\t\tvar name = obj.name || obj._id;\r\n\t\tfor (var i = 0; i < keys.length; i++) {\r\n\t\t\tvar newObj = {\"keys\": [keys[i]], \"name\": name};\r\n\t\t\t\r\n\t\t\t//indexing db 바꿀때까지 수행 안함 (2017.08.14) -> 교체 완료. 문제 없음(2017.08.17)\r\n\t\t\tseeker.send({\"req\": newObj, \"action\": seeker.indexingOne});\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tconsole.log(e.message);\r\n\t}\r\n\t\r\n\treturn res.json({\r\n\t\tresult: 'insert start'\r\n\t});\r\n}\r\n\r\n/**\r\n * 인덱싱할 내용을 함께 요청하였을 때 외부 인터페이스\r\n * @param req\r\n * @param res\r\n */\r\nexport function indexingWithInformation(req, res) {\r\n\tlet obj = req.body;\r\n\tvar keys = obj.keys;\r\n\tvar name = obj.name;\r\n\tvar contents = obj.content;\r\n\tvar classInfos = obj.classInfo;\r\n\t\r\n\tfor (var i = 0; i < keys.length; i++) {\r\n\t\tvar newObj = {\"keys\": [keys[i]], \"name\": name, \"content\": contents[i], \"classInfo\": classInfos[i]};\r\n\t\t\r\n\t\tseeker.send({\"req\": newObj, \"action\": seeker.indexingOneWithContent});\r\n\t}\r\n\t\r\n\treturn res.json({\r\n\t\tresult: 'insert start'\r\n\t});\r\n}\r\n\r\n/**\r\n * 수식을 인덱싱 할 때 외부 인터페이스\r\n * @param req\r\n * @param res\r\n */\r\nexport function indexingMath(req, res) {\r\n\tlet obj = req.body;\r\n\tlet keys = obj.keys;\r\n\tlet contents = obj.content;\r\n\tlet name = obj.name;\r\n\t\r\n\tfor (var i = 0; i < keys.length; i++) {\r\n\t\tvar newObj = {\"keys\": [keys[i]], \"name\": name, \"content\": contents[i]};\r\n\t\t\r\n\t\tseeker.send({\"req\": newObj, \"action\": seeker.indexingMath});\r\n\t}\r\n\t\r\n\treturn res.json({\r\n\t\tresult: 'insert start'\r\n\t});\r\n}\r\n\r\n/**\r\n * 색인 삭제\r\n * @param req   // {name: 'paperdoc', keys: [testcode1, testcode2]}\r\n * @param res\r\n */\r\nexport function remove(req, res) {\r\n\t// 2017.04.27 remove 요청 시 queue에 저장\r\n\tlet obj = req.body;\r\n\tvar keys = obj.keys;\r\n\tvar name = obj.name || obj._id;\r\n\tfor (var i = 0; i < keys.length; i++) {\r\n\t\tvar newObj = {\"keys\": [keys[i]], \"name\": name};\r\n\t\t\r\n\t\tseeker.send({\"req\": newObj, \"action\": seeker.remove});\r\n\t}\r\n\t\r\n\treturn res.json({\r\n\t\tresult: 'remove start'\r\n\t});\r\n}\r\n\r\n/**\r\n * 색인 수정 (삭제 후 재색인)\r\n * @param req\r\n * @param res\r\n */\r\nexport function modify(req, res) {\r\n\t// 2017.04.27 modify 요청 시 queue에 저장\r\n\tlet obj = req.body;\r\n\tvar keys = obj.keys;\r\n\tvar name = obj.name || obj._id;\r\n\tfor (var i = 0; i < keys.length; i++) {\r\n\t\tvar newObj = {\"keys\": [keys[i]], \"name\": name};\r\n\t\t\r\n\t\tseeker.send({\"req\": newObj, \"action\": seeker.modify});\r\n\t}\r\n\t\r\n\treturn res.json({\r\n\t\tresult: 'modify start'\r\n\t});\r\n}\r\n\r\nexport function getTotal(req, res) {\r\n\tlet dbname = req.body.dbname;\r\n\t\r\n\treturn mongodb.open('batch', dbname)\r\n\t.then((db) => {\r\n\t\tlet count = 0;\r\n\t\t\r\n\t\treturn db.count((err, count) => {\r\n\t\t\tif (err)\r\n\t\t\t\tres.json(err);\r\n\t\t\t\r\n\t\t\tres.json({\r\n\t\t\t\tresult: \"success\",\r\n\t\t\t\tcount:  count\r\n\t\t\t});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\treturn res.json({\r\n\t\t\tresult: \"fail\"\r\n\t\t});\r\n\t});\r\n}\r\n\r\nexport function copy(req, res) {\r\n\tvar dbo = req.body.dbo;\r\n\tvar core = req.body.core;\r\n\treturn mongodb.open('batch', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.save(core, err => {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn logger.log('error', 'copy : put to core db fail\\n' + err.message);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet orderKey = core.index.columns.find(function (o) {\r\n\t\t\t\treturn o.type == 'order';\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tlet recentDate = core.recentUpdate;\r\n\t\t\t\r\n\t\t\tlet pk = core.index.columns.find((o) => {\r\n\t\t\t\treturn o.type == \"unique\";\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tlet parent = core.index.columns.find((o) => {\r\n\t\t\t\treturn o.type == \"parent\";\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tdbcopy.run({\r\n\t\t\t\t_id:          core._id,\r\n\t\t\t\tdbo:          dbo,                                       // LDB 이름 (테이블명)\r\n\t\t\t\tname:         core._id.split('_')[1],                   // DB 종류\r\n\t\t\t\ttotal:        core.index.originalCount,                       // 전체 색인 count\r\n\t\t\t\tpk:           pk.name,   // key 값 !! 문서 마다 고유한 값이어야함\r\n\t\t\t\tparentkey:    parent ? parent.name : undefined,   // parent key 값\r\n\t\t\t\tconfig:       core.db,                                       // core DB 정보(커넥션)\r\n\t\t\t\tipp:          100,                                             // 한번에 복사할 문서 수\r\n\t\t\t\torder:        orderKey,                                       // 정렬할 key, 문서 당 1개씩만 - 2017.08.07, KCW\r\n\t\t\t\trecentUpdate: recentDate,                                 // 최근 복사날짜, 해당 날짜 이후의 문항만 복사함 - 2017.08.07, KCW\r\n\t\t\t\tapiurl:       core.apiurl\r\n\t\t\t}, (err, result) => {                                        // callback 비동기로 처리\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn logger.log('error', 'copy : Copy RDB to LDB fail\\n' + err.message);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn logger.log('info', 'copy : Copy RDB to LDB success\\n' + result);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn res.status(201).json({\r\n\t\t\t\tresult: 'success'\r\n\t\t\t});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// 색인 시작\r\nexport function indexing(req, res) {\r\n\tvar core = req.body.core;\r\n\tvar isEach = req.body.isEach;\r\n\t\r\n\tlogger.log('info', 'indexing : indexing run start' + core._id);\r\n\tindexer.run({\r\n\t\tname:   core._id,                       // core 이름(테이블명)\r\n\t\tisEach: isEach                            // 각개 색인 여부 (2017.08.09, KCW)\r\n\t}, done => logger.log('info', \"indexing : indexing run success\\n\" + done));\r\n\t\r\n\treturn res.json({\r\n\t\tresult: 'success'\r\n\t});\r\n}\r\n\r\nexport function update(req, res) {\r\n\tlet core = req.body.core;\r\n\t//console.log(core);\r\n\tres.send(\"\");\r\n\treturn dbcopy.update(core, 0, 0);\r\n}\r\n\r\n// 색인된 ldb 삭제\r\nexport function destroy(req, res) {\r\n\tvar name = req.body.name;\r\n\tvar done = () => {\r\n\t\treturn mongodb.open('batch', 'coredb')\r\n\t\t.then((coredb) => {\r\n\t\t\t// core의 내용 가져와서 업데이트\r\n\t\t\treturn coredb.findOne({_id: name}, (err, doc) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn logger.log('error', 'destroy : update information from core fail\\n' + err.message);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tdoc.index[\"doneCnt\"] = 0;      // 색인된 문서의 수\r\n\t\t\t\tdoc.index[\"lastKey\"] = '0';    // 마지막으로 색인된 key\r\n\t\t\t\tdoc.index[\"total\"] = 0;\r\n\t\t\t\tdoc.recentUpdate = undefined;\r\n\t\t\t\t\r\n\t\t\t\treturn coredb.save(doc, (err) => {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\treturn logger.log('error', 'destroy : update information from core fail\\n' + err.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tlogger.log('info', 'destroy : remove LDB success');\r\n\t\t\t\t\treturn res.json({\r\n\t\t\t\t\t\tresult: 'success'\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tlogger.log('error', 'destroy : update information from core fail\\n' + err.message);\r\n\t\t\treturn res.json(err);\r\n\t\t});\r\n\t};\r\n\t\r\n\t// 색인된 ldb 삭제\r\n\treturn mongodb.destroy('batch', name)\r\n\t.then(() => {\r\n\t\treturn mongodb.destroy('batch', name + '_posting');\r\n\t})\r\n\t.then(() => {\r\n\t\treturn mongodb.destroy('batch', name + '_term');\r\n\t})\r\n\t.then(() => {\r\n\t\treturn done();\r\n\t})\r\n\t.catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\treturn done();\r\n\t});\r\n}\r\n\r\n/**\r\n * 인덱싱 되어있는지 채크하는 인터페이스\r\n * @param reqf\r\n * @param res\r\n * @returns {*}\r\n */\r\nexport function indexingCheck(req, res) {\r\n\tlet core = req.body.core;\r\n\tlet key = req.body.key;\r\n\treturn mongodb.open('batch', core._id)\r\n\t.then((docdb) => {\r\n\t\t\r\n\t\treturn docdb.findOne({_id: key}, (err, doc) => {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn res.json({result: false, message: err.message});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (doc == null || !doc.tf)\r\n\t\t\t\treturn res.json({result: false});\r\n\t\t\t\r\n\t\t\treturn res.json({result: true});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\tres.json({result: false});\r\n\t});\r\n}"]}