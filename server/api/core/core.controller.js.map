{"version":3,"sources":["api/core/core.controller.js"],"names":["index","meta","metaSave","save","indexInfo","create","testConnection","getColumns","getIndexInfo","remove","init","_","require","mongodb","rdb","logger","req","res","sitePrefix","body","temp","query","_id","$regex","RegExp","open","then","coredb","find","sort","toArray","err","result","undefined","json","i","length","push","log","catch","console","coreList","insert","core","prefix","omit","status","config","type","connect","conn","message","sql","getPagingSql","params","key","value","queryWithConn","rows","cnt","keys","sample","name","localdb","count","deleteOne","destroy","docdb"],"mappings":"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","file":"core.controller.js","sourcesContent":["/**\r\n * 색인 DB Core 관리\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/cores              ->  index\r\n * 2018.05.23 batch 전용으로 변경되었음\r\n */\r\n\r\n'use strict';\r\nconst _ = require('lodash');\r\nconst mongodb = require('../../components/commons/mongo');\r\nconst rdb = require('../../components/commons/rdb');\r\n\r\nvar logger = require('../../components/loggers/logger');\r\n\r\n/**\r\n * 전체 목록가져오기, db 이름 순으로 가져옴\r\n * @param req   // 요청 객체 (req.body : 요청 파라메터)  이하 동일 (모든 controller에서 사용)\r\n * @param res   // 응답 객체                           이하 동일 (모든 controller에서 사용)\r\n */\r\nexport function index(req, res) {\r\n\tlet sitePrefix = req.body.sitePrefix;\r\n\tvar temp = [];\r\n\tlet query = {};\r\n\tif (sitePrefix) {\r\n\t\tquery._id = {$regex: new RegExp(sitePrefix + \"_.*\")}\r\n\t}\r\n\t\r\n\tmongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.find(query).sort({_id: 1}).toArray((err, result) => {\r\n\t\t\tif (result == null || result == undefined)\r\n\t\t\t\treturn res.json(temp);\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\ttemp.push(result[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlogger.log('info', 'Get all List : take all database list success');\r\n\t\t\treturn res.json(temp);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\nexport function meta(req, res) {\r\n\tvar temp = [];\r\n\tmongodb.open('core', 'coredb_meta', true)\r\n\t.then((coredb) => {\r\n\t\treturn coredb.find().sort({_id: 1}).toArray((err, result) => {\r\n\t\t\tif (result == null || result == undefined)\r\n\t\t\t\treturn res.json(temp);\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\ttemp.push(result[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlogger.log('info', 'Get all List : take all database list success');\r\n\t\t\treturn res.json(temp);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\nexport function metaSave(req, res) {\r\n\tvar coreList = req.body;\r\n\treturn mongodb.open('core', 'coredb_meta', true)\r\n\t.then((coredb) => {\r\n\t\tcoredb.remove({}, (err) => {\r\n\t\t\tif (coreList.length > 0) {\r\n\t\t\t\t\r\n\t\t\t\tcoredb.insert(coreList, (err) => {\r\n\t\t\t\t\t//\tconsole.log(err);\r\n\t\t\t\t\tres.json({result: 'done'});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\nexport function save(req, res) {\r\n\tvar core = req.body.core;\r\n\tvar prefix = req.body.prefix;\r\n\treturn mongodb.open('core', 'coredb', true)\r\n\t.then((coredb) => {\r\n\t\tcoredb.save(core, (err) => {\r\n\t\t\t//\tconsole.log(err);\r\n\t\t\tres.json({result: 'done'});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// 일반 목록 가져오기 --> 보안 문제로 DB 정보 제거\r\n// db 이름 순으로 정렬\r\n// Gets a list of Cores\r\nexport function indexInfo(req, res) {\r\n\tvar temp = [];\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.find().sort({\r\n\t\t\t_id: 1\r\n\t\t}).toArray((err, result) => {\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\ttemp.push(_.omit(result[i], ['db', 'index']));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn res.json(temp);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// Core 생성 및 재저장\r\nexport function create(req, res) {\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.save(req.body, err => {\r\n\t\t\tif (err) {\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn res.status(201).json({\r\n\t\t\t\tresult: 'success'\r\n\t\t\t});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// RDB 커넥션 테스트\r\nexport function testConnection(req, res) {\r\n\tvar config = req.body;\r\n\treturn rdb[config.type].connect(config, (err, conn) => {\r\n\t\tif (err) {\r\n\t\t\tlogger.log('error', 'Test Connection : connect RDB fail\\n' + err.message);\r\n\t\t\t\r\n\t\t\treturn res.json(403, err.message);\r\n\t\t}\r\n\t\t\r\n\t\treturn res.json({\r\n\t\t\tresult: 'success'\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// RDB에서 컬럼 가져오기\r\nexport function getColumns(req, res) {\r\n\tvar config = req.body;\r\n\t\r\n\t//console.log(req.body);\r\n\t\r\n\tvar sql = rdb[config.type].getPagingSql(req.body.sql);\r\n\t\r\n\tvar params = [\r\n\t\t{key: 'firstIndex', value: 1, type: 'Int'},\r\n\t\t{key: 'lastIndex', value: 2, type: 'Int'}\r\n\t];\r\n\t\r\n\treturn rdb[config.type].queryWithConn(sql, params, config, (rows, cnt) => {\r\n\t\treturn res.json({\r\n\t\t\tkeys:   _.keys(rows[0]),\r\n\t\t\tsample: rows[0],\r\n\t\t\t// fulldata : rows\r\n\t\t\tcnt:    cnt\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// 색인 정보 가져오기\r\nexport function getIndexInfo(req, res) {\r\n\t\r\n\tvar name = req.body._id;\r\n\treturn mongodb.open('core', name)\r\n\t.then((localdb) => {\r\n\t\treturn localdb.count((err, count) => {\r\n\t\t\tlogger.log('info', 'Get Index : get Index Information\\ncount:' + count);\r\n\t\t\t\r\n\t\t\treturn res.json(count);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// Core 삭제\r\nexport function remove(req, res) {\r\n\tlet name = req.body.key;\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.deleteOne({_id: req.body.key}, (err) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tlogger.log('error', 'Remove Core : remove ' + req.params.key + ' from coredb fail\\n' + err.message);\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmongodb.destroy('core', name)\r\n\t\t\t.then(() => {\r\n\t\t\t\treturn mongodb.destroy('core', name + \"_term\");\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\treturn mongodb.destroy('core', name + \"_posting\");\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tlogger.log('info', 'Remove Core : removed ' + req.params.key + ' from coredb success');\r\n\t\t\t\tres.json({result: \"success\"});\r\n\t\t\t});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n/**\r\n * mongodb 초기화\r\n * @param req\r\n * @param res\r\n * @returns {*}\r\n */\r\nexport function init(req, res) {\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.find({}, (err, result) => {\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\tlet docdb = result[i]._id;\r\n\t\t\t\t\r\n\t\t\t\tmongodb.destroy('core', docdb)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn mongodb.destroy('core', docdb + \"_term\");\r\n\t\t\t\t})\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn mongodb.destroy('core', docdb + \"_posting\");\r\n\t\t\t\t})\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn coredb.remove({}, () => {\r\n\t\t\t\t\t\tres.json({result: \"success\"});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}"]}