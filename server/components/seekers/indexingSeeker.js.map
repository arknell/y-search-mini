{"version":3,"sources":["components/seekers/indexingSeeker.js"],"names":["_","require","dbcopy","indexer","logger","mongodb","indexingOne","indexingOneWithContent","remove","modify","indexingMath","util","seeker","exports","datas","nowWorking","send","input","done","push","workElement","doWork","length","data","shift","action","callback","err","updateLastOrderKey","docDb","dbName","req","name","trim","open","then","collection","findOne","_id","doc","undefined","metaInfo","keys","column","index","columns","find","o","type","lastOrderKeyValue","nowIndexingOne","save","catch","doIndexingOne","copied","doRemove","doModify","doIndexingOneWithContent","doIndexingOneMath","e","log","message","obj","alreadyCopied","coredb","assign","add","rslt","console"],"mappings":"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","file":"indexingSeeker.js","sourcesContent":["/**\r\n * indexing 관련 요청(indexingOne, remove, modify) 큐 관리\r\n * 순차적 처리\r\n * Created by ChanWoo Kwon on 2017-04-26.\r\n */\r\n'use strict';\r\nconst _ = require('lodash');\r\nconst dbcopy = require('../indexers/dbcopy');\r\nconst indexer = require('../indexers/indexer');\r\nconst logger = require('../loggers/logger');\r\nconst mongodb = require('../commons/mongo');\r\n\r\nexport const indexingOne = \"indexingOne\";\r\nexport const indexingOneWithContent = \"indexingOneWithContent\";\r\nexport const remove = \"remove\";\r\nexport const modify = \"modify\";\r\nexport const indexingMath = \"indexingMath\";\r\n\r\nlet util = require('../commons/utils');\r\n\r\nconst seeker = exports;\r\n\r\n// 요청 queue 저장 element : {\"keys\" : [문항 코드], \"name\" : [데이터베이스 이름]}\r\nlet datas = [];\r\nlet nowWorking = false;\r\n\r\n/**\r\n * 외부 사용 함수 (indexing.controller.js 의weee indexingOne, remove, modify 에서 사용)\r\n * @param input 사용할 요청 {\"req\":{\"keys\":[문항 코드],\"name\":[데이터베이스 이름]},\"action\":[취할 행동] , \"copied\" : [복사 여부]}\r\n * @param done 콜백\r\n */\r\nseeker.send = function (input, done) {\r\n\tinput.done = done;\r\n\tdatas.push(input);\r\n\tif (!nowWorking) {\r\n\t\tnowWorking = true;\r\n\t\tworkElement();\r\n\t}\r\n//done(input);\r\n};\r\n\r\nlet workElement = function () {\r\n\tlet doWork = () => {\r\n\t\tif (datas.length == 0) {\r\n\t\t\tnowWorking = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet data = datas.shift();\r\n\t\t\r\n\t\tlet action = data.action;\r\n\t\t\r\n\t\tlet callback = (err) => {\r\n\t\t\tif (data.done)\r\n\t\t\t\tdata.done(err);\r\n\t\t\t\r\n\t\t\tlet updateLastOrderKey = () => {\r\n\t\t\t\tlet docDb = null;\r\n\t\t\t\tlet dbName = data.req.name.trim();\r\n\t\t\t\t\r\n\t\t\t\tmongodb.open('indexing', dbName, false)\r\n\t\t\t\t.then((collection) => {\r\n\t\t\t\t\tdocDb = collection;\r\n\t\t\t\t\treturn mongodb.open('indexing', 'coredb', false);\r\n\t\t\t\t})\r\n\t\t\t\t.then((collection) => {\r\n\t\t\t\t\treturn collection.findOne({_id: dbName}, (err, doc) => {\r\n\t\t\t\t\t\tif (err || doc == undefined) {\r\n\t\t\t\t\t\t\treturn doWork();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet metaInfo = doc;\r\n\t\t\t\t\t\treturn docDb.findOne({_id: data.req.keys[0]}, (err, doc) => {\r\n\t\t\t\t\t\t\tif (err || doc == undefined) {\r\n\t\t\t\t\t\t\t\treturn doWork();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet column = metaInfo.index.columns.find(function (o) {\r\n\t\t\t\t\t\t\t\treturn o.type === 'order'\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (column == null)\r\n\t\t\t\t\t\t\t\treturn doWork();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tmetaInfo.lastOrderKeyValue = doc[column.name];\r\n\t\t\t\t\t\t\tmetaInfo.nowIndexingOne = false;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn collection.save(metaInfo, (err) => {\r\n\t\t\t\t\t\t\t\treturn doWork();\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn doWork();\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treturn updateLastOrderKey();\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\tswitch (action) {\r\n\t\t\t\tcase indexingOne:\r\n\t\t\t\t\treturn doIndexingOne(data.req, data.copied, callback);\r\n\t\t\t\tcase remove:\r\n\t\t\t\t\treturn doRemove(data.req, callback);\r\n\t\t\t\tcase modify:\r\n\t\t\t\t\treturn doModify(data.req, callback);\r\n\t\t\t\tcase indexingOneWithContent:\r\n\t\t\t\t\treturn doIndexingOneWithContent(data.req, callback);\r\n\t\t\t\tcase indexingMath:\r\n\t\t\t\t\treturn doIndexingOneMath(data.req, callback);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tlogger.log('error', 'indexing-one : ' + e.message);\r\n\t\t\t\r\n\t\t\treturn doWork();\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn doWork();\r\n};\r\n\r\n/**\r\n * key의 개수에 상관없이 한꺼번에 처리\r\n * @param obj\r\n * @param alreadyCopied target db에 복사된 여부\r\n * @param done 콜백\r\n */\r\nlet doIndexingOne = function (obj, alreadyCopied, done) {\r\n\talreadyCopied = alreadyCopied || false;\r\n\treturn mongodb.open('index', 'coredb')\r\n\t.then((coredb) => {\r\n\t\t\r\n\t\treturn coredb.findOne({_id: obj.name}, (err, doc) => {              // core에서 해당 db의 내용 호출\r\n\t\t\t//2017.01.18 존재하지 않는 db 사용시 에러 처리\r\n\t\t\tif (err) {\r\n\t\t\t\tlogger.log('error', \"indexing one : fail\\n\" + err.message);\r\n\t\t\t\treturn done(err);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (doc == null) {\r\n\t\t\t\tlogger.log('error', \"indexing one : database is not exist, doc is null \" + obj.name);\r\n\t\t\t\treturn done();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdoc.nowIndexingOne = true;\r\n\t\t\t\r\n\t\t\tcoredb.save(doc, (err) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tlogger.log('error', \"indexing one : fail\\n\" + err.message);\r\n\t\t\t\t\treturn done(err);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tobj = _.assign(obj, doc);\r\n\t\t\t\tobj.name = obj._id;\r\n\t\t\t\t\r\n\t\t\t\tif (alreadyCopied == true) {\r\n\t\t\t\t\treturn indexer.indexingOne(obj, (err) => {       // 복사된 내용 색인\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\tlogger.log('error', \"indexing one : fail\\n\" + err.message);\r\n\t\t\t\t\t\t\treturn done(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlogger.log('info', 'indexing one : success ' + obj.name + '\\n');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn done();\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn dbcopy.add(obj, (rslt) => {                   // RDB에서 LDB로t 복사\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn indexer.indexingOne(obj, (err) => {       // 복사된 내용 색인\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\tlogger.log('error', \"indexing one : fail\\n\" + err);\r\n\t\t\t\t\t\t\t\treturn done(err);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlogger.log('info', 'indexing one : success ' + obj.name + '\\n');\r\n\t\t\t\t\t\t\treturn done();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n};\r\n\r\n/**\r\n * key 개수만큼 실행\r\n * @param obj\r\n * @param done\r\n */\r\nlet doRemove = function (obj, done) {\r\n\t//console.log('remove request ' , obj);\r\n\treturn indexer.remove(obj, () => {\r\n\t\tlogger.log('info', 'remove one : success\\n');\r\n\t\treturn done();\r\n\t});\r\n};\r\n\r\n/**\r\n * remove 후 insert 구조\r\n * @param obj\r\n * @param done\r\n */\r\nlet doModify = function (obj, done) {\r\n\t//insert 및 remove는  key의 개수만큼 실행되어야 함 -> 중도 search 요청 때문 (2017.05.12)\r\n\treturn indexer.remove(obj, () => {\r\n\t\t\r\n\t\treturn doIndexingOne(obj, false, done);\r\n\t});\r\n};\r\n\r\n/**\r\n * 내용이 함께 요청되었을 때 동작하는 인터페이스\r\n * @param obj\r\n * @param done\r\n * @returns {*}\r\n */\r\nlet doIndexingOneWithContent = function (obj, done) {\r\n\tindexer.remove(obj, () => {\r\n\t\treturn mongodb.open('index', 'coredb')\r\n\t\t.then((coredb) => {\r\n\t\t\t\r\n\t\t\treturn coredb.findOne({_id: obj.name}, (err, doc) => {              // core에서 해당 db의 내용 호출\r\n\t\t\t\t//2017.01.18 존재하지 않는 db 사용시 에러 처리\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tlogger.log('error', \"indexing one : fail\\n\" + err.message);\r\n\t\t\t\t\treturn done();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (doc == null) {\r\n\t\t\t\t\tlogger.log('error', \"indexing one : database is not exist, doc is null \" + obj.name);\r\n\t\t\t\t\treturn done();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tobj = _.assign(obj, doc);\r\n\t\t\t\tobj.name = obj._id;\r\n\t\t\t\treturn dbcopy.add(obj, (rslt) => {                   // RDB에서 LDB로 복사\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn indexer.indexingOneWithContent(obj, (err) => {       // 복사된 내용 색인\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\tlogger.log('error', \"indexing one : fail\\n\" + err);\r\n\t\t\t\t\t\t\treturn done();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlogger.log('info', 'indexing one : success ' + obj.name + '\\n');\r\n\t\t\t\t\t\treturn done();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n};\r\n\r\n/**\r\n * 수식을 인덱싱하는 인터페이스\r\n * 수정 필요 (2017.12.13)\r\n * @param obj\r\n * @param done\r\n * @returns {*}\r\n */\r\nlet doIndexingOneMath = function (obj, done) {\r\n\treturn mongodb.open('index', 'coredb')\r\n\t.then((coredb) => {\r\n\t\t\r\n\t\treturn coredb.findOne({_id: obj.name}, (err, doc) => {              // core에서 해당 db의 내용 호출\r\n\t\t\t//2017.01.18 존재하지 않는 db 사용시 에러 처리\r\n\t\t\tif (err) {\r\n\t\t\t\treturn logger.log('error', \"indexing one : fail\\n\" + err.message);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (doc == null)\r\n\t\t\t\treturn logger.log('error', \"indexing one : database is not exist, doc is null \" + obj.name);\r\n\t\t\t\r\n\t\t\tobj = _.assign(obj, doc);\r\n\t\t\tobj.name = obj._id;\r\n\t\t\t\r\n\t\t\tconsole.log(JSON.stringify(obj));\r\n\t\t\t\r\n\t\t\treturn indexer.indexingMath(obj, (err) => {       // 복사된 내용 색인\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tlogger.log('error', \"indexing one : fail\\n\" + err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlogger.log('info', 'indexing one : success ' + obj.name + '\\n');\r\n\t\t\t\t}\r\n\t\t\t\treturn done();\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n};\r\n\r\n"]}