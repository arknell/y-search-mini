{"version":3,"sources":["components/recovery/RecoveryManager.js"],"names":["rdb","require","logger","mongodb","adder","dbCopy","util","reader","indexer","properties","cron","_","RecoveryManager","done","open","then","collection","find","toArray","err","res","index","cb","value","nowIndexingOne","console","log","_id","getNonIndexedData","catch","info","column","columns","o","type","undefined","lastOrderKeyValue","getRecoveryByOrderKey","apiurl","dbo","name","split","orderKey","db","afterCopy","dataList","wordIndexingList","wordIndexing","data","readDataOne","doc","body","docdb","paraParentKey","math","doIndexing","ops","pk","parent","i","length","key","obj","mergeSumObj","push","insert","mustHandler","code","duplicateHandler","schedule","scheduleTime","canNext","kind","indexOf","indexing","remove","statusUpdate","getRecovery","EDITGB","CONTID","seq","SRCHIDX_HISTORY_SEQ","executeIndex","indexingKeys","getItem","keys","updateRecovery","executeRemove","removeQuery","newRemove","concat","$or","words","tf","word","hasOwnProperty","freq","ndocs","removeAndUpdateRecovery","module","exports"],"mappings":"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","file":"RecoveryManager.js","sourcesContent":["/**\r\n * 검색 엔진이 갑자기 죽은 후 살아 날 때 인덱싱되지 못한 문항을 인덱싱 하기 위함\r\n * @author ChanWoo Kwon\r\n * date : 2018-04-16\r\n */\r\n\r\nvar rdb = require('../commons/rdb');\r\n\r\nlet logger = require('../loggers/logger');\r\nlet mongodb = require('../commons/mongo');\r\n\r\nlet adder = require('../indexers/adder');\r\nlet dbCopy = require('../indexers/dbcopy');\r\nlet util = require('../commons/utils');\r\nlet reader = require('../indexers/reader');\r\nlet indexer = require('../indexers/indexer');\r\n\r\nlet properties = require('../../config/environment');\r\n\r\nlet cron = require('node-cron');\r\n\r\nlet _ = require('lodash');\r\n\r\nclass RecoveryManager {\r\n\trecovery(done) {\r\n\t\treturn mongodb.open('recovery', 'coredb', false)\r\n\t\t.then((collection) => {\r\n\t\t\tcollection.find().toArray((err, res) => {\r\n\t\t\t\tif (err)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tlet index = 0;\r\n\t\t\t\t\r\n\t\t\t\tlet cb = () => {\r\n\t\t\t\t\tlet value = res[index];\r\n\t\t\t\t\tif (!value)\r\n\t\t\t\t\t\treturn done();\r\n\t\t\t\t\t\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// -- 단일 색인 중 프로그램이 종료된 경우\r\n\t\t\t\t\tif (value.nowIndexingOne) {\r\n\t\t\t\t\t\tconsole.log(value._id + ' need recovery');\r\n\t\t\t\t\t\treturn this.getNonIndexedData(value, cb);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\treturn cb();\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\treturn cb();\r\n\t\t\t})\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn done();\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * 초 단위로 날짜가 기록되기 때문에 마지막 기록 시간에 인덱싱 된 문항도 다시 색인한다.\r\n\t * 서버에서 동시간에 문항이 기록될 수도 있기 때문\r\n\t * @param info\r\n\t * @param cb\r\n\t * @returns {*}\r\n\t */\r\n\tgetNonIndexedData(info, cb) {\r\n\t\tlet column = info.index.columns.find(function (o) {\r\n\t\t\treturn o.type === 'order';\r\n\t\t});\r\n\t\t\r\n\t\tif (column == undefined || info.lastOrderKeyValue == undefined)\r\n\t\t\treturn cb();\r\n\t\t\r\n\t\treturn rdb.getRecoveryByOrderKey({\r\n\t\t\tapiurl:            info.apiurl,\r\n\t\t\tdbo:               info.dbo,\r\n\t\t\tname:              info._id.split(\"_\")[1],\r\n\t\t\torderKey:          column.name,\r\n\t\t\tlastOrderKeyValue: info.lastOrderKeyValue\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tlogger.log('info', 'start indexing, ' + info._id);\r\n\t\t\tmongodb.open('recovery', info._id, false)\r\n\t\t\t.then((db) => {\r\n\t\t\t\tlet afterCopy = (dataList) => {\r\n\t\t\t\t\tlet index = 0;\r\n\t\t\t\t\tlet wordIndexingList = [];\r\n\t\t\t\t\tlet wordIndexing = () => {\r\n\t\t\t\t\t\tlet data = dataList[index++];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!data) {\r\n\t\t\t\t\t\t\treturn adder(wordIndexingList, {name: info._id}, () => {\r\n\t\t\t\t\t\t\t\tconsole.log(info._id, 'end word index');\r\n\t\t\t\t\t\t\t\treturn cb();\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn reader.readDataOne(info.apiurl, data, db, info.index.columns, false, false, (err, doc, body, docdb, paraParentKey, math) => {\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\treturn cb(true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn reader.doIndexing(info.apiurl, doc, body, docdb, wordIndexingList, math, () => {\r\n\t\t\t\t\t\t\t\treturn wordIndexing();\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn wordIndexing();\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tvar ops = [];\r\n\t\t\t\t\r\n\t\t\t\tlet pk = info.index.columns.find((o) => {\r\n\t\t\t\t\treturn o.type == \"unique\";\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tlet parent = info.index.columns.find((o) => {\r\n\t\t\t\t\treturn o.type == \"parent\";\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tfor (var i = 0; i < res.length; i++) {\r\n\t\t\t\t\tlet key = (parent && res[i][parent]) ? res[i][parent] + res[i][pk] : res[i][pk];\r\n\t\t\t\t\t//console.log('index key', key);\r\n\t\t\t\t\tvar obj = {_id: key};\r\n\t\t\t\t\tobj = util.mergeSumObj(obj, res[i]);\r\n\t\t\t\t\tops.push(obj);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn db.insert(ops, (err) => {\r\n\t\t\t\t\tlet mustHandler = false;\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tif (err.code == 11000) {\r\n\t\t\t\t\t\t\t// -- duplicate error\r\n\t\t\t\t\t\t\tmustHandler = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn console.log(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (mustHandler)\r\n\t\t\t\t\t\treturn dbCopy.duplicateHandler(db, ops, afterCopy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn afterCopy(ops);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\tscheduling() {\r\n\t\tcron.schedule(properties.scheduleTime, () => {\r\n\t\t\tlogger.log('info', 'start indexing according to schedule..');\r\n\t\t\t\r\n\t\t\treturn mongodb.open('recovery', 'coredb', false)\r\n\t\t\t.then((collection) => {\r\n\t\t\t\tcollection.find().toArray((err, res) => {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tlet index = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet cb = (canNext) => {\r\n\t\t\t\t\t\tif (canNext)\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet value = res[index];\r\n\t\t\t\t\t\tif (!value)\r\n\t\t\t\t\t\t\treturn logger.log('info', 'schedule indexing is done');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet kind = \"\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (value._id.indexOf('quizdoc') != -1) {\r\n\t\t\t\t\t\t\tkind = \"QUIZ\";\r\n\t\t\t\t\t\t} else if (value._id.indexOf('conceptdoc') != -1) {\r\n\t\t\t\t\t\t\tkind = \"CONC\";\r\n\t\t\t\t\t\t} else if (value._id.indexOf('paperdoc') != -1) {\r\n\t\t\t\t\t\t\tkind = \"TEST\";\r\n\t\t\t\t\t\t} else if (value._id.indexOf('passagedoc') != -1) {\r\n\t\t\t\t\t\t\tkind = \"PQUIZ\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn cb(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn this.doIndexing(value, kind, cb);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn cb(false);\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\treturn done();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\tdoIndexing(info, kind, cb) {\r\n\t\tlet indexing = [];\r\n\t\tlet remove = [];\r\n\t\tlet statusUpdate = [];\r\n\t\t\r\n\t\tif (!info.dbo)\r\n\t\t\treturn cb(true);\r\n\t\treturn rdb.getRecovery({dbo: info.dbo, kind: kind, apiurl: info.apiurl}).then((res) => {\r\n\t\t\t//\tconsole.log(info.dbo, kind);\r\n\t\t\tif (res.length == 0)\r\n\t\t\t\treturn cb(true);\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < res.length; i++) {\r\n\t\t\t\tlet doc = res[i];\r\n\t\t\t\t\r\n\t\t\t\tif (doc.EDITGB == 'IU') {\r\n\t\t\t\t\t// -- indexing\r\n\t\t\t\t\tindexing.push({code: doc.CONTID, seq: doc.SRCHIDX_HISTORY_SEQ})\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// -- removing\r\n\t\t\t\t\tremove.push({code: doc.CONTID, seq: doc.SRCHIDX_HISTORY_SEQ})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// -- 색인 실행\r\n\t\t\tlet executeIndex = () => {\r\n\t\t\t\tlet indexingKeys = [];\r\n\t\t\t\t\r\n\t\t\t\tfor (let i = 0; i < indexing.length; i++) {\r\n\t\t\t\t\tindexingKeys.push(indexing[i].code);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn rdb.getItem({name: info.dbo, keys: indexingKeys, apiurl: info.apiurl})\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tif (res.length == 0)\r\n\t\t\t\t\t\treturn cb();\r\n\t\t\t\t\t\r\n\t\t\t\t\tlogger.log('info', 'start indexing, ' + info._id + \" \" + indexing.length);\r\n\t\t\t\t\treturn mongodb.open('recovery', info._id, false)\r\n\t\t\t\t\t.then((db) => {\r\n\t\t\t\t\t\tlet afterCopy = (dataList) => {\r\n\t\t\t\t\t\t\tlet index = 0;\r\n\t\t\t\t\t\t\tlet wordIndexingList = [];\r\n\t\t\t\t\t\t\tlet wordIndexing = () => {\r\n\t\t\t\t\t\t\t\tlet data = dataList[index++];\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (!data) {\r\n\t\t\t\t\t\t\t\t\treturn adder(wordIndexingList, {name: info._id}, () => {\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(info._id, 'end word index');\r\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < indexing.length; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tstatusUpdate.push(indexing[i].seq);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\treturn rdb.updateRecovery({dbo: info.dbo, keys: statusUpdate, apiurl: info.apiurl})\r\n\t\t\t\t\t\t\t\t\t\t.then((res) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\treturn cb(false);\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn reader.readDataOne(info.apiurl, data, db, info.index.columns, false, false, (err, doc, body, docdb, paraParentKey, math) => {\r\n\t\t\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t\t\treturn cb(true);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\treturn reader.doIndexing(info.apiurl, doc, body, docdb, wordIndexingList, math, () => {\r\n\t\t\t\t\t\t\t\t\t\treturn wordIndexing();\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn wordIndexing();\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar ops = [];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet pk = info.index.columns.find((o) => {\r\n\t\t\t\t\t\t\treturn o.type == \"unique\";\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet parent = info.index.columns.find((o) => {\r\n\t\t\t\t\t\t\treturn o.type == \"parent\";\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < res.length; i++) {\r\n\t\t\t\t\t\t\tlet key = (parent && res[i][parent] ) ? res[i][parent] + res[i][pk] : res[i][pk];\r\n\t\t\t\t\t\t\t//console.log('index key', key);\r\n\t\t\t\t\t\t\tvar obj = {_id: key};\r\n\t\t\t\t\t\t\tobj = util.mergeSumObj(obj, res[i]);\r\n\t\t\t\t\t\t\tops.push(obj);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn db.insert(ops, (err) => {\r\n\t\t\t\t\t\t\tlet mustHandler = false;\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\tif (err.code == 11000) {\r\n\t\t\t\t\t\t\t\t\t// -- duplicate error\r\n\t\t\t\t\t\t\t\t\tmustHandler = true;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn console.log(err);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (mustHandler)\r\n\t\t\t\t\t\t\t\treturn dbCopy.duplicateHandler(db, ops, afterCopy);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\treturn afterCopy(ops);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// -- 삭제 실행\r\n\t\t\tlet executeRemove = () => {\r\n\t\t\t\tlet removeQuery = [];\r\n\t\t\t\tlet newRemove = [];\r\n\t\t\t\tnewRemove = newRemove.concat(remove);\r\n\t\t\t\tnewRemove = newRemove.concat(indexing);\r\n\t\t\t\t\r\n\t\t\t\tfor (let i = 0; i < newRemove.length; i++) {\r\n\t\t\t\t\tremoveQuery.push({_id: newRemove[i].code});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tmongodb.open('recovery', info._id, false)\r\n\t\t\t\t.then((collection) => {\r\n\t\t\t\t\tconsole.log('remove all', info._id, Object.keys(newRemove).length);\r\n\t\t\t\t\tcollection.find({$or: removeQuery}).toArray((err, res) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\treturn console.log(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//console.log(info._id, removeQuery, res);\r\n\t\t\t\t\t\tlet words = {};\r\n\t\t\t\t\t\tlet key = [];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (let i = 0; i < res.length; i++) {\r\n\t\t\t\t\t\t\tlet tf = res[i].tf;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (let word in tf) {\r\n\t\t\t\t\t\t\t\tif (words.hasOwnProperty(word)) {\r\n\t\t\t\t\t\t\t\t\twords[word].freq += tf[word].freq;\r\n\t\t\t\t\t\t\t\t\twords[word].ndocs++;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\twords[word] = {\r\n\t\t\t\t\t\t\t\t\t\tfreq:  tf[word].freq,\r\n\t\t\t\t\t\t\t\t\t\tndocs: 1\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tkey.push(res[i]._id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tindexer.removeAndUpdateRecovery(info._id, words, key, (err) => {\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// update status rdb\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let i = 0; i < remove.length; i++) {\r\n\t\t\t\t\t\t\t\t\tstatusUpdate.push(remove[i].seq);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn executeIndex();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (remove.length == 0 && indexing.length == 0)\r\n\t\t\t\treturn cb(true);\r\n\t\t\t\r\n\t\t\treturn executeRemove();\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = RecoveryManager;"]}