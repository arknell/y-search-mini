{"version":3,"sources":["components/similarity/SimilarityChecker.js"],"names":["reader","require","util","mongodb","ne","SimilarityChecker","apiurl","name","list","limitRatio","collection","undefined","resolve","reject","open","then","db","core","orOperation","i","quiz","push","_id","find","$or","toArray","err","res","tfList","done","calSimilarity","getContentTf","info","QUIZBODY","quizbody","wordList","tf","catch","findOne","doc","message","getQuizDoc","key","body","docdb","parentKey","keyword","wordList2","bagOfWord","makeVector","vector","Array","length","fill","word","total","concat","code","hasOwnProperty","vector1","vector2","similarity","indexOf","vectorList","freq","newRank","rank","rankingWithoutZeroKey","rankOne","parseFloat","sim","destination","result","sort","o1","o2","source","ratio","getTd","content","module","exports"],"mappings":"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","file":"SimilarityChecker.js","sourcesContent":["/**\r\n * 문항 세트의 서로 유사도를 검사하는 모듈\r\n * @author ChanWoo Kwon\r\n * date : 2018-05-08\r\n */\r\n\r\nlet reader = require('../indexers/reader');\r\nlet util = require('../commons/utils');\r\nlet mongodb = require('../commons/mongo');\r\nlet ne = require('../commons/ne');\r\n\r\nclass SimilarityChecker {\r\n\treadContentFromCode(apiurl, name, list, limitRatio) {\r\n\t\tlet collection = undefined;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\treturn mongodb.open('similarityChecker', name, false)\r\n\t\t\t.then((db) => {\r\n\t\t\t\tcollection = db;\r\n\t\t\t\treturn mongodb.open('similarityChecker', 'coredb', false);\r\n\t\t\t}).then((core) => {\r\n\t\t\t\t\r\n\t\t\t\tlet orOperation = [];\r\n\t\t\t\tfor (let i in list) {\r\n\t\t\t\t\tlet quiz = list[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\torOperation.push({_id: quiz});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn collection.find({$or: orOperation}).toArray((err, res) => {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treturn reject(err);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet tfList = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet done = () => {\r\n\t\t\t\t\t\treturn this.calSimilarity(tfList, limitRatio)\r\n\t\t\t\t\t\t.then((res) => {\r\n\t\t\t\t\t\t\treturn resolve(res);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet i = 0;\r\n\t\t\t\t\tlet getContentTf = () => {\r\n\t\t\t\t\t\tlet info = res[i++];\r\n\t\t\t\t\t\tif (!info) {\r\n\t\t\t\t\t\t\treturn done();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (info.QUIZBODY || info.quizbody) {\r\n\t\t\t\t\t\t\t// quiz body is content\r\n\t\t\t\t\t\t\treturn ne(apiurl, info.QUIZBODY || info.quizbody)\r\n\t\t\t\t\t\t\t.then((wordList) => {\r\n\t\t\t\t\t\t\t\ttfList[info._id] = util.tf(wordList, 'all');\r\n\t\t\t\t\t\t\t\treturn getContentTf();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// quiz path is content\r\n\t\t\t\t\t\t\treturn core.findOne({_id: name}, (err, doc) => {\r\n\t\t\t\t\t\t\t\tif (err || !doc)\r\n\t\t\t\t\t\t\t\t\treturn reject(err || {message: 'doc is null, ' + name});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn reader.getQuizDoc(doc, info.key, true, false, (err, doc, body, docdb, parentKey) => {\r\n\t\t\t\t\t\t\t\t\treturn ne(apiurl, body || '')\r\n\t\t\t\t\t\t\t\t\t.then((keyword) => {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttfList[info._id] = util.tf(keyword, 'all');\r\n\t\t\t\t\t\t\t\t\t\treturn getContentTf();\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\t\t\t\treturn reject(err);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn getContentTf();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\tcalSimilarityWithoutTF(wordList, wordList2) {\r\n\t\tlet bagOfWord = {};\r\n\t\tlet makeVector = (list) => {\r\n\t\t\tlet vector = new Array(Object.keys(bagOfWord).length).fill(0);\r\n\t\t\tfor (let i =0;i<list.length;i++) {\r\n\t\t\t\tlet word = list[i];\r\n\t\t\t\tvector[bagOfWord[word]] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn vector;\r\n\t\t};\r\n\t\tlet total = wordList.concat(wordList2);\r\n\t\tfor (let i=0;i< total.length;i++) {\r\n\t\t\t// -- make bagOfWord\r\n\t\t\tlet word = total[i];\r\n\t\t\tlet code = Object.keys(bagOfWord).length;\r\n\t\t\tif (bagOfWord.hasOwnProperty(word) == false)\r\n\t\t\t\tbagOfWord[word] = code;\r\n\t\t}\r\n\t\t\r\n\t\tlet vector1 = makeVector(wordList);\r\n\t\tlet vector2 = makeVector(wordList2);\r\n\t\t\r\n\t\treturn util.similarity(vector1, vector2);\r\n\t}\r\n\t\r\n\tcalSimilarity(tfList, limitRatio) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet bagOfWord = {};\r\n\t\t\tfor (let key in tfList) {\r\n\t\t\t\t// -- make bagOfWord\r\n\t\t\t\tfor (let word in tfList[key]) {\r\n\t\t\t\t\tlet code = Object.keys(bagOfWord).length;\r\n\t\t\t\t\tif (bagOfWord.hasOwnProperty(word) == false && word.indexOf(':') == -1)\r\n\t\t\t\t\t\tbagOfWord[word] = code;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet vectorList = {};\r\n\t\t\t\r\n\t\t\tfor (let key in tfList) {\r\n\t\t\t\t// -- make vector\r\n\t\t\t\tlet vector = new Array(Object.keys(bagOfWord).length).fill(0);\r\n\t\t\t\tfor (let word in tfList[key]) {\r\n\t\t\t\t\tvector[bagOfWord[word]] = tfList[key][word].freq;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvectorList[key] = vector;\r\n\t\t\t}\r\n\t\t\t//console.log(vectorList, bagOfWord);\r\n\t\t\tlet newRank = {};\r\n\t\t\t\r\n\t\t\tfor (let key in vectorList) {\r\n\t\t\t\t// -- cal similarity O(n * log n)\r\n\t\t\t\t\r\n\t\t\t\tlet quiz = vectorList[key];\r\n\t\t\t\t\r\n\t\t\t\tdelete vectorList[key];\r\n\t\t\t\t\r\n\t\t\t\tlet rank = util.rankingWithoutZeroKey(quiz, vectorList);\r\n\t\t\t\tfor (let i in rank) {\r\n\t\t\t\t\tlet rankOne = rank[i];\r\n\t\t\t\t\tif ((parseFloat(rankOne.sim) >= limitRatio[1] / 100) && (parseFloat(rankOne.sim) <= limitRatio[0] / 100)) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (newRank.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\tnewRank[key].destination.push({key: rankOne.key, sim: rankOne.sim});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnewRank[key] = {destination: [{key: rankOne.key, sim: rankOne.sim}]};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet result = [];\r\n\t\t\tfor (let key in newRank) {\r\n\t\t\t\tnewRank[key].destination.sort(function (o1, o2) {\r\n\t\t\t\t\treturn o2.sim - o1.sim;\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tsource:      key,\r\n\t\t\t\t\tdestination: newRank[key].destination\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn resolve(result);\r\n\t\t});\r\n\t}\r\n\t\r\n\t// -- 나중에 사용\r\n\tgetSimilarityContent(apiurl, list, ratio) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet tfList = {};\r\n\t\t\tlet done = () => {\r\n\t\t\t\treturn this.calSimilarity(tfList, ratio)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn resolve(res);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\tlet i = 0;\r\n\t\t\tlet getTd = () => {\r\n\t\t\t\tlet quiz = list[i++];\r\n\t\t\t\t\r\n\t\t\t\tif (!quiz)\r\n\t\t\t\t\treturn done();\r\n\t\t\t\t\r\n\t\t\t\tne(apiurl, quiz.content, false)\r\n\t\t\t\t.then((content) => {\r\n\t\t\t\t\ttfList[quiz.key] = util.tf(content);\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn getTd();\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn reject(err);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treturn getTd();\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = SimilarityChecker;"]}