{"version":3,"sources":["components/commons/rdb.js"],"names":["request","require","module","exports","getItem","opts","resolve","reject","uri","apiurl","method","headers","json","dbo","keys","name","error","response","body","statusCode","result","data","message","errMessage","getBatch","order","recentUpdate","firstIndex","lastIndex","getRecovery","kind","getRecoveryByOrderKey","updateRecovery"],"mappings":"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","file":"rdb.js","sourcesContent":["/**\r\n *\r\n * @author ChanWoo Kwon\r\n * date : 2019-01-04\r\n */\r\nvar request = require('request');\r\n/**\r\n * @param str      // 색인어를 추출할 입력 문자열  String\r\n */\r\nmodule.exports = {\r\n\t/**\r\n\t * 특정 문항 정보를 RDB에서 읽어옴\r\n\t * @param opts\r\n\t *  dbo : RDB에서 DBO 이름\r\n\t *  keys : 정보를 가져올 문항의 Unique key 리스트 (여러개 문항 가능)\r\n\t *  apiurl: 정보를 가져올 api 서비스 url,\r\n\t *  name: db kind (quizdoc, quizhwp, etc)\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetItem:  function (opts) {\r\n\t\t\"use strict\";\r\n\t\t\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\trequest({\r\n\t\t\t\turi:     opts.apiurl + '/item.dox',\r\n\t\t\t\tmethod:  'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'charset':      'utf-8'\r\n\t\t\t\t},\r\n\t\t\t\tjson:    {dbo: opts.dbo, keys: opts.keys, name: opts.name}\r\n\t\t\t}, function (error, response, body) {\r\n\t\t\t\tif (!error && response.statusCode == 200) {\r\n\t\t\t\t\tif (body.result == 'success') {\r\n\t\t\t\t\t\t//return resolve(_.difference(body.data, stopword))\r\n\t\t\t\t\t\treturn resolve(body.data)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject({message: body.message, errMessage: body.errMessage});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\t/**\r\n\t * 여러개 문항 정보를 RDB에서 읽어옴\r\n\t * @param opts\r\n\t *  dbo : RDB에서 DBO 이름\r\n\t *  order : 오더링 key\r\n\t *  recentUpdate : 최근 업데이트\r\n\t *  firstIndex: 가져올 문항들의 첫번째 인덱스 (row_number 기반)\r\n\t *  lastIndex: 가져올 문항들의 마지막 인덱스 (row_number 기반)\r\n\t *  apiurl : 가져올 api 서비스 url\r\n\t *  name: db kind (quizdoc, quizhwp, etc)\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetBatch: function (opts) {\r\n\t\t\"use strict\";\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\trequest({\r\n\t\t\t\turi:     opts.apiurl + '/batch.dox',\r\n\t\t\t\tmethod:  'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'charset':      'utf-8'\r\n\t\t\t\t},\r\n\t\t\t\tjson:    {dbo: opts.dbo, order: opts.order, recentUpdate: opts.recentUpdate, firstIndex: opts.firstIndex, lastIndex: opts.lastIndex, name: opts.name}\r\n\t\t\t}, function (error, response, body) {\r\n\t\t\t\tif (!error && response.statusCode == 200) {\r\n\t\t\t\t\tif (body.result == 'success') {\r\n\t\t\t\t\t\t//return resolve(_.difference(body.data, stopword))\r\n\t\t\t\t\t\treturn resolve(body.data)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject({message: body.message, errMessage: body.errMessage});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\t\r\n\tgetRecovery: function (opts) {\r\n\t\t\"use strict\";\r\n\t\t//console.log(opts);\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\trequest({\r\n\t\t\t\turi:     opts.apiurl + '/recovery.dox',\r\n\t\t\t\tmethod:  'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'charset':      'utf-8'\r\n\t\t\t\t},\r\n\t\t\t\tjson:    {dbo: opts.dbo, kind: opts.kind}\r\n\t\t\t}, function (error, response, body) {\r\n\t\t\t\tif (!error && response.statusCode == 200) {\r\n\t\t\t\t\tif (body.result == 'success') {\r\n\t\t\t\t\t\t//return resolve(_.difference(body.data, stopword))\r\n\t\t\t\t\t\treturn resolve(body.data)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject({message: body.message, errMessage: body.errMessage});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\t\r\n\tgetRecoveryByOrderKey: function (opts) {\r\n\t\t\"use strict\";\r\n\t\t//console.log(opts);\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\trequest({\r\n\t\t\t\turi:     opts.apiurl + '/recovery/order.dox',\r\n\t\t\t\tmethod:  'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'charset':      'utf-8'\r\n\t\t\t\t},\r\n\t\t\t\tjson:    {dbo: opts.dbo, kind: opts.kind}\r\n\t\t\t}, function (error, response, body) {\r\n\t\t\t\tif (!error && response.statusCode == 200) {\r\n\t\t\t\t\tif (body.result == 'success') {\r\n\t\t\t\t\t\t//return resolve(_.difference(body.data, stopword))\r\n\t\t\t\t\t\treturn resolve(body.data)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject({message: body.message, errMessage: body.errMessage});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\t\r\n\tupdateRecovery: function (opts) {\r\n\t\t\"use strict\";\r\n\t\t\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\trequest({\r\n\t\t\t\turi:     opts.apiurl + '/recovery/update.dox',\r\n\t\t\t\tmethod:  'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'charset':      'utf-8'\r\n\t\t\t\t},\r\n\t\t\t\tjson:    {dbo: opts.dbo, keys: opts.keys}\r\n\t\t\t}, function (error, response, body) {\r\n\t\t\t\tif (!error && response.statusCode == 200) {\r\n\t\t\t\t\tif (body.result == 'success') {\r\n\t\t\t\t\t\t//return resolve(_.difference(body.data, stopword))\r\n\t\t\t\t\t\treturn resolve(body.data)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject({message: body.message, errMessage: body.errMessage});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n};"]}