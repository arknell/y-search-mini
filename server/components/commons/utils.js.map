{"version":3,"sources":["components/commons/utils.js"],"names":["_","require","fs","path","similarity","logger","request","termFrequency","freq","max","mergeSumObj","o1","o2","undefined","Object","defaults","forEach","val","key","mergeMinusSumObj","module","exports","getTextFromFile","apiurl","filepath","callback","uri","method","headers","json","error","response","body","statusCode","result","data","message","errMessage","tf","words","opts","temp","countBy","identity","values","bow","queryToVector","idf","array","toArray","vector","Array","size","i","length","count","vec1","vec2","ranking","q","docs","rank","Math","push","sim","toFixed","orderBy","rankingWithoutZeroKey","removeIndices","newQ","slice","newVector","splice","errorHandler","msg","err","Error"],"mappings":"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","file":"utils.js","sourcesContent":["/**\r\n * 검색엔진 여러 곳에서 사용할 가능성이 높은 유틸성 library\r\n * 1. term frequency 계산\r\n * 2. 질의 벡터 생성\r\n * 3. text 문서에서 text 추출\r\n * 4. 두개의 object 합병\r\n * 5. 여러개의 벡터 순위화\r\n *\r\n * @author Saebyeok Lee\r\n * @since 0.1.0\r\n */\r\n\r\n\"use strict\";\r\nlet _ = require('lodash'),\r\n\tfs = require('fs'),\r\n\tpath = require('path'),\r\n\tsimilarity = require('compute-cosine-similarity');      // 코사인 유사도 계산 라이브러리\r\nlet logger = require('../loggers/logger');\r\nvar request = require('request');\r\n\r\n// -- node-java의 경우 하나의 모듈을 사용해야함.\r\n// -- 서로 다른 모듈을 사용했을 경우 프로그램이 죽음 (캐치 못함)\r\n\r\n/**\r\n * Term Frequency 계산식 (증가 빈도)\r\n * -- 참고 : http://dev.youngkyu.kr/25\r\n * @param freq\r\n * @param max\r\n * @returns {number}\r\n */\r\nfunction termFrequency(freq, max) {\r\n\treturn 0.5 + (0.5 * (freq / max)); // 1 + Math.log(val);\r\n}\r\n\r\n/**\r\n * 두개의 Object를 합병\r\n * 안에 있는 값의 키가 같을 경우 sum\r\n * @param {Object} o1\r\n * @param {Object} o2\r\n * @returns {*}\r\n */\r\nfunction mergeSumObj(o1, o2) {\r\n\tif (o1 == undefined || o2 == undefined)\r\n\t\treturn o1;\r\n\t\r\n\tif (!o1 instanceof Object || !o2 instanceof Object) {\r\n\t\treturn o1;\r\n\t}\r\n\t\r\n\treturn _.defaults(_(o1).forEach(function (val, key) {\r\n\t\t//key가 숫자일 경우 integer로 검사되던 버그 수정 (2017.04.28)\r\n\t\tkey = key + \"\";\r\n\t\tif (key in o2) {\r\n\t\t\tif (o2[key] instanceof Object && val instanceof Object) {\r\n\t\t\t\to1[key] = mergeSumObj(val, o2[key]);\r\n\t\t\t} else if ((typeof o2[key] === 'number') && (typeof val === 'number')) {\r\n\t\t\t\to1[key] = val + o2[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}), o2);\r\n}\r\n\r\nfunction mergeMinusSumObj(o1, o2) {\r\n\tif (o1 == undefined || o2 == undefined)\r\n\t\treturn o1;\r\n\t\r\n\tif (!o1 instanceof Object || !o2 instanceof Object) {\r\n\t\treturn o1;\r\n\t}\r\n\t\r\n\treturn _.defaults(_(o1).forEach(function (val, key) {\r\n\t\t//key가 숫자일 경우 integer로 검사되던 버그 수정 (2017.04.28)\r\n\t\tkey = key + \"\";\r\n\t\tif (key in o2) {\r\n\t\t\tif (o2[key] instanceof Object && val instanceof Object) {\r\n\t\t\t\to1[key] = mergeMinusSumObj(val, o2[key]);\r\n\t\t\t} else if ((typeof o2[key] === 'number') && (typeof val === 'number')) {\r\n\t\t\t\to1[key] = val - o2[key];\r\n\t\t\t\tif (o1[key] < 1) {\r\n\t\t\t\t\tdelete o1[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}), o2);\r\n}\r\n\r\nmodule.exports = {\r\n\t/**\r\n\t * 비동기 방식으로 filepath의 text를 가져옴\r\n\t * pdf, txt 지원\r\n\t * @param apiurl\r\n\t * @param filepath\r\n\t * @param callback\r\n\t */\r\n\tgetTextFromFile: function (apiurl, filepath, callback) {\r\n\t\treturn request({\r\n\t\t\turi:     apiurl + '/read.dox',\r\n\t\t\tmethod:  'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'charset':      'utf-8'\r\n\t\t\t},\r\n\t\t\tjson:    {path: filepath}\r\n\t\t}, function (error, response, body) {\r\n\t\t\tif (!error && response.statusCode == 200) {\r\n\t\t\t\tif (body.result == 'success') {\r\n\t\t\t\t\treturn callback(null, body.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn callback({message: body.message, errMessage: body.errMessage});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\t\r\n\t/**\r\n\t * 단어 배열로 부터 term frequency 를 계산함\r\n\t * @param words\r\n\t * @param opts  // 'all', 'tf', 'freq' 중 하나 값\r\n\t * @returns {{}}\r\n\t */\r\n\ttf:                    function (words, opts) {\r\n\t\topts = opts || 'all';\r\n\t\tvar temp = _.countBy(words, _.identity); // 중복 단어들을 counting\r\n\t\t\r\n\t\tif (opts === 'freq') {\r\n\t\t\treturn temp;\r\n\t\t}\r\n\t\t\r\n\t\tvar max = _.max(_.values(temp)); // 최빈값 (최대 빈도 단어의 수)\r\n\t\tvar bow = {};\r\n\t\t\r\n\t\tfor (let key in temp) {\r\n\t\t\tlet val = temp[key];\r\n\t\t\tif (opts === 'all') { // opts에 따라 결과의 형태가 달라짐\r\n\t\t\t\tbow[key] = {\r\n\t\t\t\t\ttf:   termFrequency(val, max),\r\n\t\t\t\t\tfreq: val\r\n\t\t\t\t};\r\n\t\t\t} else { // tf\r\n\t\t\t\tbow[key] = termFrequency(val, max);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn bow;\r\n\t},\r\n\tmergeSumObj:           mergeSumObj,\r\n\tmergeMinusSumObj:      mergeMinusSumObj,\r\n\t/**\r\n\t * 질의어들을 문서 벡터처럼 표현\r\n\t * @param tf\r\n\t * @param idf\r\n\t * @returns {Array}\r\n\t */\r\n\tqueryToVector:         function (tf, idf) {\r\n\t\tvar array = _.toArray(tf);\r\n\t\tvar max = 0;                         // 최빈 단어의 count\r\n\t\tvar vector = new Array(_.size(tf));     // 빈 벡터(배열) 생성\r\n\t\tvar i = 0;\r\n\t\t\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tif (array[i].count >= max)\r\n\t\t\t\tmax = array[i].count;\r\n\t\t}\r\n\t\t\r\n\t\t_(tf).forEach(function (val) {\r\n\t\t\tvector[i] = termFrequency(val.count, max) * idf[i].idf; // tf 값 계산하여 각 위치에 대입\r\n\t\t\ti = i + 1;\r\n\t\t});\r\n\t\t\r\n\t\treturn vector; // [1.32, 0.73, 9.33, ... ]\r\n\t},\r\n\t/**\r\n\t * 코사인 유사도만 계산\r\n\t * @param vec1\r\n\t * @param vec2\r\n\t * @returns {Number|Null}\r\n\t */\r\n\tsimilarity:            function (vec1, vec2) {\r\n\t\treturn similarity(vec1, vec2);\r\n\t},\r\n\t/**\r\n\t * cosine 유사도에 의한 Ranking 알고리즘\r\n\t * @param q\r\n\t * @param docs\r\n\t * @returns {Array}\r\n\t */\r\n\tranking:               function (q, docs) {\r\n\t\tvar rank = [];\r\n\t\t//console.log(docs);\r\n\t\t_(docs).forEach(function (vector, key) {\r\n\t\t\tlet max = Math.max(q.length, vector.length);\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < max; i++) {\r\n\t\t\t\tif (i >= q.length) {\r\n\t\t\t\t\tq.push(0.0);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (i >= vector.length) {\r\n\t\t\t\t\tvector.push(0.0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar sim = similarity(q, vector); // 질의 q와 문서의 cosine 유사도 계산 (모듈로 대체)\r\n\t\t\trank.push({\r\n\t\t\t\tkey: key,\r\n\t\t\t\tsim: sim > 1 ? 1 : sim.toFixed(4) // 유사도는 소수점 4자리 까지 표시\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\treturn _.orderBy(rank, ['sim'], ['desc']); // 유사도 순으로 정렬\r\n\t},\r\n\trankingWithoutZeroKey: function (q, docs) {\r\n\t\tvar rank = [];\r\n\t\t//console.log(docs);\r\n\t\t_(docs).forEach(function (vector, key) {\r\n\t\t\tlet max = Math.max(q.length, vector.length);\r\n\t\t\tlet removeIndices = [];\r\n\t\t\tfor (let i = 0; i < max; i++) {\r\n\t\t\t\tif (i >= q.length) {\r\n\t\t\t\t\tq.push(0.0);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (i >= vector.length) {\r\n\t\t\t\t\tvector.push(0.0);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (q[i] == 0 && vector[i] == 0)\r\n\t\t\t\t\tremoveIndices.push(i);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet newQ = q.slice(0);\r\n\t\t\tlet newVector = vector.slice(0);\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < removeIndices.length; i++) {\r\n\t\t\t\tnewQ.splice(removeIndices[i], 1);\r\n\t\t\t\tnewVector.splice(removeIndices[i], 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar sim = similarity(newQ, newVector); // 질의 q와 문서의 cosine 유사도 계산 (모듈로 대체)\r\n\t\t\trank.push({\r\n\t\t\t\tkey: key,\r\n\t\t\t\tsim: sim > 1 ? 1 : sim.toFixed(4) // 유사도는 소수점 4자리 까지 표시\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\treturn _.orderBy(rank, ['sim'], ['desc']); // 유사도 순으로 정렬\r\n\t},\r\n\terrorHandler:          function (msg, callback) {\r\n\t\tvar err = new Error(msg);\r\n\t\t//console.error(err);\r\n\t\tcallback(err);\r\n\t}\r\n};"]}