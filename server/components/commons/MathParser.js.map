{"version":3,"sources":["components/commons/MathParser.js"],"names":["toAbstract","normalizer","require","EqnToLatex","math","getEqn","originList","eqnList","i","length","mathOne","split","push","apiurl","mathList","res","all","resolve","reject","then","data","catch","err"],"mappings":";;;;;;;;;;QAsBgBA,U,GAAAA,U;;;;AAtBhB;;;;;;AAMA,IAAIC,aAAaC,QAAQ,2BAAR,EAAqCC,UAArC,CAAgD,IAAhD,CAAjB;AACA,IAAIC,OAAOF,QAAQ,QAAR,CAAX;;AAEA,SAASG,MAAT,CAAgBC,UAAhB,EAA4B;AAC3B,KAAIC,UAAU,EAAd;AACA,MAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,WAAWG,MAA/B,EAAuCD,GAAvC,EAA4C;AAC3C,MAAIE,UAAUJ,WAAWE,CAAX,CAAd;;AAEA,MAAIG,QAAQD,QAAQC,KAAR,CAAc,KAAd,CAAZ;;AAEAJ,UAAQK,IAAR,CAAaD,MAAMA,MAAMF,MAAN,GAAe,CAArB,CAAb;AACA;;AAED,QAAOF,OAAP;AACA;;AAEM,SAASP,UAAT,CAAoBa,MAApB,EAA4BP,UAA5B,EAAwC;;AAE9C,KAAIQ,WAAWT,OAAOC,UAAP,CAAf;;AAEA,KAAIS,MAAM,EAAV;AACA,KAAIC,MAAM,EAAV;AACA,MAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIM,SAASL,MAA7B,EAAqCD,GAArC,EAA0C;AACzCQ,SAAO,MAAMF,SAASN,CAAT,CAAb;AACA;;AAED,QAAO,sBAAY,UAACS,OAAD,EAAUC,MAAV,EAAqB;AACvCd,OAAKS,MAAL,EAAaG,GAAb,EACCG,IADD,CACM,UAACC,IAAD,EAAU;AACf,UAAOH,QAAQG,IAAR,CAAP;AACA,GAHD,EAICC,KAJD,CAIO,UAACC,GAAD,EAAS;AACf,UAAOJ,OAAOI,GAAP,CAAP;AACA,GAND;AAOA,EARM,CAAP;AAUA","file":"MathParser.js","sourcesContent":["/**\r\n *\r\n * @author ChanWoo Kwon\r\n * date : 2018-05-14\r\n */\r\n\r\nlet normalizer = require('iosys-latex-eqn-converter').EqnToLatex(true);\r\nlet math = require('./math');\r\n\r\nfunction getEqn(originList) {\r\n\tlet eqnList = [];\r\n\tfor (let i = 0; i < originList.length; i++) {\r\n\t\tlet mathOne = originList[i];\r\n\t\t\r\n\t\tlet split = mathOne.split('---');\r\n\t\t\r\n\t\teqnList.push(split[split.length - 1]);\r\n\t}\r\n\t\r\n\treturn eqnList;\r\n}\r\n\r\nexport function toAbstract(apiurl, originList) {\r\n\t\r\n\tlet mathList = getEqn(originList);\r\n\t\r\n\tlet res = [];\r\n\tlet all = \"\";\r\n\tfor (let i = 0; i < mathList.length; i++) {\r\n\t\tall += \" \" + mathList[i];\r\n\t}\r\n\t\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tmath(apiurl, all)\r\n\t\t.then((data) => {\r\n\t\t\treturn resolve(data);\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\treturn reject(err);\r\n\t\t})\r\n\t});\r\n\t\r\n}"]}