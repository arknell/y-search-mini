{"version":3,"sources":["components/indexers/dbcopy.js"],"names":["run","add","update","index","indexInfo","create","getColumns","getIndexInfo","remove","init","rdb","require","mongodb","util","_","logger","opts","cb","validate","ipp","total","iter","order","name","recentUpdate","console","log","open","_id","then","collection","async","catch","err","keys","length","errorHandler","ops","getItem","dbo","apiurl","split","res","parentKey","columns","find","o","type","pk","i","key","toUpperCase","toLowerCase","obj","mergeSumObj","push","insert","code","duplicateHandler","message","done","after","save","isObject","config","db","callback","firstIndex","lastIndex","getBatch","parentkey","mustHandler","Date","core","lastkey","curr","dataList","updateValue","bulk","initializeUnorderedBulkOp","quizcode","$set","execute","originalCount","$gt","sort","limit","toArray","result","updateColumn","dbConfig","sql","test","queryWithConn","undefined","count","req","temp","coredb","json","omit","body","status","getPagingSql","params","value","rows","cnt","sample","localdb","deleteOne","docdb","destroy"],"mappings":"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","file":"dbcopy.js","sourcesContent":["/**\r\n * RDB의 내용을 ldb로 복사\r\n */\r\n\"use strict\";\r\n\r\nvar rdb = require('../../components/commons/rdb');\r\n\r\nvar mongodb = require('../commons/mongo');\r\nvar util = require('../commons/utils');\r\nvar _ = require('lodash');\r\n\r\nvar logger = require('../../components/loggers/logger');\r\n\r\n/**\r\n * RDB 내용을 복사\r\n * @param {Object} opts\r\n * {\r\n *      ipp : number, // 한번에 가져올 갯수 (성능에 영향)\r\n *      total : number, // 전체 타겟 수\r\n *      iter : number, // 시작점\r\n *      name : string,\r\n *      pk : string,\r\n *      sql : string,\r\n *      config : {Object}\r\n * }\r\n * @param cb        // callback\r\n */\r\nexport function run(opts, cb) {\r\n\t\r\n\t//name, uniqueKey, sql, config(mssql)\r\n\tif (!validate(opts, cb)) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\topts.ipp = opts.ipp || 10000; // 1만\r\n\topts.total = opts.total || 1000000; // 100만\r\n\topts.iter = opts.iter || 0;\r\n\topts.order = opts.order ? opts.order.name : 1;\r\n\topts.recentUpdate = opts.order != 1 ? (opts.recentUpdate || '0') : '1';\r\n\t\r\n\tconsole.log('try to open collection..');\r\n\treturn mongodb.open('batch', opts._id)\r\n\t.then((collection) => {\r\n\t\tconsole.log('collection is open');\r\n\t\treturn async(collection, opts, () => {\r\n\t\t\t// mssql.close();\r\n\t\t\t/*console.log(timeArr);\r\n\t\t\t console.log((new Date() - stime) + 'ms');*/\r\n\t\t\treturn cb(null, 'copy success');\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\treturn cb(err);\r\n\t});\r\n}\r\n\r\n/**\r\n * 증분 색인\r\n * @param opts  // mongodb collection core의 내용\r\n * @param cb    // callback\r\n */\r\nexport function add(opts, cb) {\r\n\tif (opts.keys.length < 1) {\r\n\t\tutil.errorHandler('opts.keys array is empty.', cb);\r\n\t\treturn;\r\n\t}\r\n\tvar ops = [];\r\n\t//console.log(sql);\r\n\treturn rdb.getItem({dbo: opts.dbo, keys: opts.keys, apiurl: opts.apiurl, name: opts._id.split('_')[1]})\r\n\t.then((res) => {\r\n\t\t//\tconsole.log(opts.index.pk);\r\n\t\tlet parentKey = opts.index.columns.find((o) => {return o.type == 'parent';});\r\n\t\tlet pk = opts.index.columns.find((o) => {return o.type == 'unique';});\r\n\t\tfor (var i = 0; i < res.length; i++) {\r\n\t\t\tlet key = parentKey ? res[i][parentKey.name] + res[i][pk.name] : (res[i][pk.name.toUpperCase()] || res[i][pk.name.toLowerCase()]);\r\n\t\t\tvar obj = {_id: key};\r\n\t\t\tobj = util.mergeSumObj(obj, res[i]);\r\n\t\t\tops.push(obj);\r\n\t\t}\r\n\t\treturn mongodb.open('batch', opts._id);\r\n\t})\r\n\t.then((collection) => {\r\n\t\t//\tconsole.log(ops);\r\n\t\treturn collection.insert(ops, (err) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tif (err.code == 11000) {\r\n\t\t\t\t\t//duplicate key error\r\n\t\t\t\t\treturn duplicateHandler(collection, ops, cb);\r\n\t\t\t\t} else\r\n\t\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn cb(ops);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn util.errorHandler(err.message, cb);\r\n\t});\r\n}\r\n\r\nfunction duplicateHandler(collection, ops, cb) {\r\n\tconsole.log('run duplication handler');\r\n\tlet done = _.after(ops.length, function () {\r\n\t\treturn cb(ops);\r\n\t});\r\n\t\r\n\tfor (let i = 0; i < ops.length; i++) {\r\n\t\tcollection.save(ops[i], (err) => {\r\n\t\t\tif (err) {\r\n\t\t\t\t\r\n\t\t\t\tdone();\r\n\t\t\t\treturn console.log(err);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn done();\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * run 함수 용 - validate opts 파라메터\r\n * @param opts\r\n * @param cb\r\n * @returns {boolean}\r\n */\r\nfunction validate(opts, cb) {\r\n\tif (!_.isObject(opts)) {\r\n\t\tutil.errorHandler('opts is not a object.', cb);\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tif (!opts.name) {\r\n\t\tutil.errorHandler('opts.name is undefined.', cb);\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tif (!opts.pk) {\r\n\t\tutil.errorHandler('opts.pk is undefined.', cb);\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tif (!opts.config) {\r\n\t\tutil.errorHandler('opts.config is undefined.', cb);\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * 반복적으로 RDB의 내용을 불러옴\r\n * 비동기 처리를 위함\r\n * @param db            // 복사할 mongodb collection (target)\r\n * @param opts          // run 함수의 opts\r\n * @param callback\r\n */\r\nfunction async(db, opts, callback) {\r\n\t\r\n\tconsole.log(opts.iter, opts.total);\r\n\t\r\n\tif (opts.iter >= opts.total) {\r\n\t\tcallback();\r\n\t\treturn;\r\n\t}\r\n\t\r\n\topts.firstIndex = opts.iter + 1;\r\n\topts.lastIndex = opts.iter + opts.ipp;\r\n\t\r\n\t// rdb에서 데이터 가져오기\r\n\treturn rdb.getBatch(opts)\r\n\t.then((res) => {\r\n\t\tvar ops = [];\r\n\t\tfor (var i = 0; i < res.length; i++) { // level db query 생성 --> levelup API 참조\r\n\t\t\tlet key = (opts.parentkey && res[i][opts.parentkey]) ? res[i][opts.parentkey] + res[i][opts.pk] : res[i][opts.pk];\r\n\t\t\t//console.log('index key', key);\r\n\t\t\tvar obj = {_id: key};\r\n\t\t\tobj = util.mergeSumObj(obj, res[i]);\r\n\t\t\tops.push(obj);\r\n\t\t}\r\n\t\t\r\n\t\tif (res.length == 0)\r\n\t\t\treturn callback();\r\n\t\t\r\n\t\treturn db.insert(ops, (err) => {\r\n\t\t\tlet mustHandler = false;\r\n\t\t\tif (err) {\r\n\t\t\t\tif (err.code == 11000) {\r\n\t\t\t\t\tmustHandler = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn console.log(err);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet done = () => {\r\n\t\t\t\tif (res.length < opts.ipp) {\r\n\t\t\t\t\tconsole.log('indexed ' + ( opts.iter + res.length ));\r\n\t\t\t\t\tconsole.log('end of documents');\r\n\t\t\t\t} else {\r\n\t\t\t\t\topts.iter = opts.iter + opts.ipp;\r\n\t\t\t\t\tconsole.log('indexed ' + opts.iter);\r\n\t\t\t\t\tconsole.log(new Date());\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn async(db, opts, callback); // 재귀 반복 호출\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (mustHandler)\r\n\t\t\t\treturn duplicateHandler(db, ops, done);\r\n\t\t\telse\r\n\t\t\t\treturn done();\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n * 인덱싱이 필요하지 않는 컬럼이 추가되었을 경우 인덱싱을 다시 하지 않고 컬럼만 추가하는 API\r\n * 차후 추가된 컬럼 인덱싱 기능 구현해야함 (2017.07.20)\r\n * @author ChanWoo Kwon 2017.07.18\r\n * @param core core db 정보\r\n * @param lastkey 마지막 indexing key\r\n * @param curr 현재 indexing 수\r\n */\r\nexport function update(core, lastkey, curr) {\r\n\tlet dataList = [];\r\n\treturn mongodb.open('batch', core._id)\r\n\t.then((collection) => {\r\n\t\tlet updateValue = (res) => {\r\n\t\t\tlet bulk = collection.initializeUnorderedBulkOp();\r\n\t\t\tfor (let i = 0; i < res.length; i++) {\r\n\t\t\t\tbulk.find({_id: res[i].quizcode}).update({$set: res[i]});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbulk.execute()\r\n\t\t\t.then(() => {\r\n\t\t\t\tconsole.log(curr, \" is done\");\r\n\t\t\t\t\r\n\t\t\t\tif (curr < core.index.originalCount)\r\n\t\t\t\t\treturn update(core, lastkey, curr);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\treturn console.log(err);\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\treturn collection.find({_id: {$gt: lastkey + \"\"}}).sort({_id: 1}).limit(10000).toArray((err, result) => {\r\n\t\t\tif (err)\r\n\t\t\t\treturn console.log(err);\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\tdataList.push(result[i]._id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcurr += dataList.length;\r\n\t\t\tlastkey = dataList[dataList.length - 1];\r\n\t\t\t\r\n\t\t\treturn rdb.getItem({name: core._id.split('_')[1], keys: dataList, apiurl: core.apiurl})\r\n\t\t\t.then((res) => {\r\n\t\t\t\treturn updateValue(res);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t})\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n/**\r\n * @param dataList\r\n * @param dbConfig\r\n * @param callback\r\n * @returns {*}\r\n */\r\nfunction updateColumn(dataList, dbConfig, callback) {\r\n\tlet sql = dbConfig.sql;\r\n\t\r\n\t//이미 where문이 있을 경우\r\n\tif (/\\s+where/.test(sql) == true)\r\n\t\tsql += \" and \";\r\n\telse\r\n\t\tsql += \" where \";\r\n\tsql += \" quizcode in (\";\r\n\tfor (let i = 0; i < dataList.length; i++) {\r\n\t\t\r\n\t\tsql += \"'\" + dataList[i] + \"'\";\r\n\t\t\r\n\t\tif (i != dataList.length - 1)\r\n\t\t\tsql += \",\";\r\n\t}\r\n\t\r\n\tsql += \")\";\r\n\t\r\n\treturn rdb[dbConfig.type].queryWithConn(sql, undefined, dbConfig, (res, count) => {\r\n\t\treturn callback(res);\r\n\t});\r\n}\r\n\r\n/**\r\n * 전체 목록가져오기, db 이름 순으로 가져옴\r\n * @param req   // 요청 객체 (req.body : 요청 파라메터)  이하 동일 (모든 controller에서 사용)\r\n * @param res   // 응답 객체                           이하 동일 (모든 controller에서 사용)\r\n */\r\nexport function index(req, res) {\r\n\tvar temp = [];\r\n\tmongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.find().sort({_id: 1}).toArray((err, result) => {\r\n\t\t\tif (result == null || result == undefined)\r\n\t\t\t\treturn res.json(temp);\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\ttemp.push(result[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlogger.log('info', 'Get all List : take all database list success');\r\n\t\t\treturn res.json(temp);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// 일반 목록 가져오기 --> 보안 문제로 DB 정보 제거\r\n// db 이름 순으로 정렬\r\n// Gets a list of Cores\r\nexport function indexInfo(req, res) {\r\n\tvar temp = [];\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.find().sort({\r\n\t\t\t_id: 1\r\n\t\t}).toArray((err, result) => {\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\ttemp.push(_.omit(result[i], ['db', 'index']));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn res.json(temp);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// Core 생성 및 재저장\r\nexport function create(req, res) {\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.save(req.body, err => {\r\n\t\t\tif (err) {\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn res.status(201).json({\r\n\t\t\t\tresult: 'success'\r\n\t\t\t});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// RDB에서 컬럼 가져오기\r\nexport function getColumns(req, res) {\r\n\tvar config = req.body;\r\n\t\r\n\t//console.log(req.body);\r\n\t\r\n\tvar sql = rdb[config.type].getPagingSql(req.body.sql);\r\n\t\r\n\tvar params = [\r\n\t\t{key: 'firstIndex', value: 1, type: 'Int'},\r\n\t\t{key: 'lastIndex', value: 2, type: 'Int'}\r\n\t];\r\n\t\r\n\treturn rdb[config.type].queryWithConn(sql, params, config, (rows, cnt) => {\r\n\t\treturn res.json({\r\n\t\t\tkeys:   _.keys(rows[0]),\r\n\t\t\tsample: rows[0],\r\n\t\t\t// fulldata : rows\r\n\t\t\tcnt:    cnt\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// 색인 정보 가져오기\r\nexport function getIndexInfo(req, res) {\r\n\t\r\n\tvar name = req.body._id;\r\n\treturn mongodb.open('core', name)\r\n\t.then((localdb) => {\r\n\t\treturn localdb.count((err, count) => {\r\n\t\t\tlogger.log('info', 'Get Index : get Index Information\\ncount:' + count);\r\n\t\t\t\r\n\t\t\treturn res.json(count);\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n// Core 삭제\r\nexport function remove(req, res) {\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.deleteOne({_id: req.params.key}, (err) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tlogger.log('error', 'Remove Core : remove ' + req.params.key + ' from coredb fail\\n' + err.message);\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlogger.log('info', 'Remove Core : removed ' + req.params.key + ' from coredb success');\r\n\t\t\treturn res.json({result: 'success'});\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}\r\n\r\n/**\r\n * mongodb 초기화\r\n * @param req\r\n * @param res\r\n * @returns {*}\r\n */\r\nexport function init(req, res) {\r\n\treturn mongodb.open('core', 'coredb')\r\n\t.then((coredb) => {\r\n\t\treturn coredb.find({}, (err, result) => {\r\n\t\t\tfor (let i = 0; i < result.length; i++) {\r\n\t\t\t\tlet docdb = result[i]._id;\r\n\t\t\t\t\r\n\t\t\t\tmongodb.destroy('core', docdb)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn mongodb.destroy('core', docdb + \"_term\");\r\n\t\t\t\t})\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn mongodb.destroy('core', docdb + \"_posting\");\r\n\t\t\t\t})\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn coredb.remove({}, () => {\r\n\t\t\t\t\t\tres.json({result: \"success\"});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t})\r\n\t.catch((err) => {\r\n\t\treturn console.log(err);\r\n\t});\r\n}"]}