{"version":3,"sources":["components/auth/auth.service.js"],"names":["localAuthenticate","isAuthenticated","signToken","setTokenCookie","validateJwt","secret","config","secrets","session","users","findUser","id","_","find","name","password","done","user","message","console","log","pw","omit","use","req","res","next","body","hasOwnProperty","headers","authorization","access_token","_id","status","end","role","jwt","sign","expiresIn","send","token","cookie","redirect"],"mappings":"AAAA;;;;AAIA;;;;;QAoBgBA,iB,GAAAA,iB;QAwBAC,e,GAAAA,e;QA+CAC,S,GAAAA,S;QASAC,c,GAAAA,c;;AAlGhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIC,cAAc,0BAAW;AAC5BC,SAAQC,sBAAOC,OAAP,CAAeC;AADK,CAAX,CAAlB;;AAIA,IAAIC,QAAQH,sBAAOG,KAAnB;;AAEA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;;AAErB,QAAOC,iBAAEC,IAAF,CAAOJ,KAAP,EAAc,EAAC,MAAME,EAAP,EAAd,CAAP;AACA;;AAED;AACO,SAASX,iBAAT,CAA2Bc,IAA3B,EAAiCC,QAAjC,EAA2CC,IAA3C,EAAiD;AACvD,KAAIC,OAAOP,SAASI,IAAT,CAAX;AACA,KAAI,CAACG,IAAL,EAAW;AACVD,OAAK,IAAL,EAAW,KAAX,EAAkB;AACjBE,YAAS;AADQ,GAAlB;AAGA;AACA;;AAEDC,SAAQC,GAAR,CAAYH,IAAZ;;AAEA,KAAIA,KAAKI,EAAL,KAAYN,QAAhB,EAA0B;AACzBC,OAAK,IAAL,EAAWJ,iBAAEU,IAAF,CAAOL,IAAP,EAAa,IAAb,CAAX;AACA,EAFD,MAEO;AACND,OAAK,IAAL,EAAW,KAAX,EAAkB;AACjBE,YAAS;AADQ,GAAlB;AAGA;AACD;;AAED;;;;AAIO,SAASjB,eAAT,GAA2B;AACjC,QAAO;AACP;AADO,EAENsB,GAFM,CAEF,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC9B;AACA,MAAIF,IAAIG,IAAJ,IAAYH,IAAIG,IAAJ,CAASC,cAAT,CAAwB,cAAxB,CAAhB,EAAyD;AACxDJ,OAAIK,OAAJ,CAAYC,aAAZ,GAA4B,YAAYN,IAAIG,IAAJ,CAASI,YAAjD;AACA;AACD3B,cAAYoB,GAAZ,EAAiBC,GAAjB,EAAsBC,IAAtB;AACA,EARM;AASP;AATO,EAUNH,GAVM,CAUF,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;;AAE9B;AACA,MAAIT,OAAOP,SAASc,IAAIP,IAAJ,CAASe,GAAlB,CAAX;AACA,MAAI,CAACf,IAAL,EAAW;AACV,UAAOQ,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACA;AACDV,MAAIP,IAAJ,GAAWL,iBAAEU,IAAF,CAAOL,IAAP,EAAa,IAAb,CAAX;AACAS;AACA,EAnBM,CAAP;AAoBA;;AAED;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;;AAIO,SAASxB,SAAT,CAAmBS,EAAnB,EAAuBwB,IAAvB,EAA6B;AACnC,QAAOC,uBAAIC,IAAJ,CAAS,EAACL,KAAKrB,EAAN,EAAUwB,MAAMA,IAAhB,EAAT,EAAgC7B,sBAAOC,OAAP,CAAeC,OAA/C,EAAwD;AAC9D8B,aAAW,KAAK,EAAL,GAAU,EADyC,CACtC;AADsC,EAAxD,CAAP;AAGA;;AAED;;;AAGO,SAASnC,cAAT,CAAwBqB,GAAxB,EAA6BC,GAA7B,EAAkC;AACxC,KAAI,CAACD,IAAIP,IAAT,EAAe;AACd,SAAOQ,IAAIQ,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,wDAArB,CAAP;AACA;AACD,KAAIC,QAAQtC,UAAUsB,IAAIP,IAAJ,CAASe,GAAnB,EAAwBR,IAAIP,IAAJ,CAASkB,IAAjC,CAAZ;AACAV,KAAIgB,MAAJ,CAAW,OAAX,EAAoBD,KAApB;AACAf,KAAIiB,QAAJ,CAAa,GAAb;AACA","file":"auth.service.js","sourcesContent":["/**\r\n * 웹 사용자 계정 관련 Service\r\n * 기본 생성된 내용\r\n */\r\n'use strict';\r\n\r\nimport config from '../../config/environment';\r\nimport jwt from 'jsonwebtoken';\r\nimport expressJwt from 'express-jwt';\r\nimport compose from 'composable-middleware';\r\nimport _ from 'lodash';\r\n\r\nvar validateJwt = expressJwt({\r\n\tsecret: config.secrets.session\r\n});\r\n\r\nvar users = config.users;\r\n\r\nfunction findUser(id) {\r\n\t\r\n\treturn _.find(users, {'id': id});\r\n}\r\n\r\n// 웹 사용자 로그인\r\nexport function localAuthenticate(name, password, done) {\r\n\tvar user = findUser(name);\r\n\tif (!user) {\r\n\t\tdone(null, false, {\r\n\t\t\tmessage: 'This username is not registered.'\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tconsole.log(user);\r\n\t\r\n\tif (user.pw === password) {\r\n\t\tdone(null, _.omit(user, 'pw'));\r\n\t} else {\r\n\t\tdone(null, false, {\r\n\t\t\tmessage: 'This password is not correct.'\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Attaches the user object to the request if authenticated\r\n * Otherwise returns 403\r\n */\r\nexport function isAuthenticated() {\r\n\treturn compose()\r\n\t// Validate jwt\r\n\t.use(function (req, res, next) {\r\n\t\t// allow access_token to be passed through query parameter as well\r\n\t\tif (req.body && req.body.hasOwnProperty('access_token')) {\r\n\t\t\treq.headers.authorization = 'Bearer ' + req.body.access_token;\r\n\t\t}\r\n\t\tvalidateJwt(req, res, next);\r\n\t})\r\n\t// Attach user to request\r\n\t.use(function (req, res, next) {\r\n\t\t\r\n\t\t//console.log(req.user);\r\n\t\tvar user = findUser(req.user._id);\r\n\t\tif (!user) {\r\n\t\t\treturn res.status(401).end();\r\n\t\t}\r\n\t\treq.user = _.omit(user, 'pw');\r\n\t\tnext();\r\n\t});\r\n}\r\n\r\n/**\r\n * Checks if the user role meets the minimum requirements of the route\r\n */\r\n/*export function hasRole(roleRequired) {\r\n    if (!roleRequired) {\r\n        throw new Error('Required role needs to be set');\r\n    }\r\n\r\n    return compose()\r\n        .use(isAuthenticated())\r\n        .use(function meetsRequirements(req, res, next) {\r\n            if (config.userRoles.indexOf(req.user.role) >=\r\n                config.userRoles.indexOf(roleRequired)) {\r\n                next();\r\n            } else {\r\n                res.status(403).send('Forbidden');\r\n            }\r\n        });\r\n}*/\r\n\r\n/**\r\n * Returns a jwt token signed by the app secret\r\n * 로그인 토근 및 세션 유지 시간 -\r\n */\r\nexport function signToken(id, role) {\r\n\treturn jwt.sign({_id: id, role: role}, config.secrets.session, {\r\n\t\texpiresIn: 60 * 60 * 48 //(48시간) //인덱싱이 상당히 오래걸릴 수 있음\r\n\t});\r\n}\r\n\r\n/**\r\n * Set token cookie directly for oAuth strategies\r\n */\r\nexport function setTokenCookie(req, res) {\r\n\tif (!req.user) {\r\n\t\treturn res.status(404).send('It looks like you aren\\'t logged in, please try again.');\r\n\t}\r\n\tvar token = signToken(req.user._id, req.user.role);\r\n\tres.cookie('token', token);\r\n\tres.redirect('/');\r\n}\r\n"]}