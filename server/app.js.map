{"version":3,"sources":["app.js"],"names":["app","server","http","createServer","require","default","logger","RecoveryManager","recoveryManager","startServer","angularFullstack","listen","config","port","ip","log","get","console","process","env","batch","scheduling","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,MAAM,wBAAV;AACA,IAAIC,SAASC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEAI,QAAQ,kBAAR,EAA4BC,OAA5B,CAAoCL,GAApC;AACAI,QAAQ,UAAR,EAAoBC,OAApB,CAA4BL,GAA5B;AACA,IAAIM,SAASF,QAAQ,6BAAR,CAAb;;AAEA,IAAIG,kBAAkBH,QAAQ,uCAAR,CAAtB;AACA,IAAII,kBAAkB,IAAID,eAAJ,EAAtB;;AAEA;AACA,SAASE,WAAT,GAAuB;AACtBT,KAAIU,gBAAJ,GAAuBT,OAAOU,MAAP,CAAcC,sBAAOC,IAArB,EAA2BD,sBAAOE,EAAlC,EAAsC,YAAY;AACxER,SAAOS,GAAP,CAAW,MAAX,EAAmB,iCAAiCH,sBAAOC,IAAxC,GAA+C,QAA/C,GAA0Db,IAAIgB,GAAJ,CAAQ,KAAR,CAA1D,GAA2E,OAA9F;;AAEAC,UAAQF,GAAR,CAAY,gBAAZ,EAA8BG,QAAQC,GAAR,CAAYC,KAA1C;AACA;AACA,MAAIF,QAAQC,GAAR,CAAYC,KAAhB,EAAuB;AACtBd,UAAOS,GAAP,CAAW,MAAX,EAAmB,qBAAnB;AACAP,mBAAgBa,UAAhB;AACA;AACD,EATsB,CAAvB;AAUA;;AAED,4BAAaZ,WAAb;;AAEA;AACAa,UAAUC,OAAOD,OAAP,GAAiBtB,GAA3B","file":"app.js","sourcesContent":["/**\r\n * Main application file\r\n */\r\n\r\n'use strict';\r\n\r\nimport express from 'express';\r\nimport config from './config/environment';\r\nimport http from 'http';\r\n\r\n// Setup server\r\nvar app = express();\r\nvar server = http.createServer(app);\r\n\r\nrequire('./config/express').default(app);\r\nrequire('./routes').default(app);\r\nvar logger = require('./components/loggers/logger');\r\n\r\nlet RecoveryManager = require('./components/recovery/RecoveryManager');\r\nlet recoveryManager = new RecoveryManager();\r\n\r\n// Start server\r\nfunction startServer() {\r\n\tapp.angularFullstack = server.listen(config.port, config.ip, function () {\r\n\t\tlogger.log('info', 'Express server listening on ' + config.port + ' , in ' + app.get('env') + ' mode');\r\n\t\t\r\n\t\tconsole.log('info, is batch', process.env.batch);\r\n\t\t//process.env.batch = true; (just test)\r\n\t\tif (process.env.batch) {\r\n\t\t\tlogger.log('info', 'recovery is started');\r\n\t\t\trecoveryManager.scheduling();\r\n\t\t}\r\n\t});\r\n}\r\n\r\nsetImmediate(startServer);\r\n\r\n// Expose app\r\nexports = module.exports = app;"]}